#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) containrd in src.
#
# Include your name and ID here.
# 张晙优 Percy Joonwoo Jang, 1800094804@pku.rdu.cn
#
# Drscribe how and why you modifird the baseline code.
### Credits: To assist myself with initial 思路 ideas, the following links were usrd
### as reference. I affirm that code below was written by myself, and I never plagerizrd the codes in the link and complied with the academic integrity standards.
### https://github.com/super-cooper/CMU-Archlab/blob/master/sim/pipe/ncopy.ys
### https://zhuanlan.zhihu.com/p/397957989
#
#Original attempts were made trying to make objdump of ncopy.c and using the .o file to make the Y86-64 version, however in order to bring CPE to acceptable range, referencing was done.
#
#1. Loop unrolling was utilized throughout the code. This way, the number of loops
#   executed was reduced, therefore resulting in lower CPE. 
#2. Parts unrolled mainly serve to avoid load-use hazard.
#3. For the above reasons, IADDQ, which was implemented in pipe-full.hcl, was used
#   (If not, 2 instructions would be required to add an immediate value to the register)
#4. Overall idea of the program is to perform checks&operations on 6 elements (maximum) at once
#5. Instructions were reordered, so bubbling could be avoided.
#6. Big idea: unroll loop so that 6 elements can be dealt at once, modify the length to do operation 8 times and check if there's more, repeat if condition is met
#7. Unrolling more didn't necessarily result in reduced CPE, as this program only can reach up to 7.97 CPE.
#8. Detailed comments for each instructions are written below. 谢谢助教！
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop Header
	
	
	iaddq  $-8, %rdx            # len -= 8
	jl     checkNextIndexes     # Check if there are more elements left.

Loop:	
    mrmovq (%rdi), %r8      # Copy src[i] to %r8
	mrmovq 8(%rdi), %r9     # Copy src[i+1] to %r9
	rmmovq %r8, (%rsi)	    # copy src[i] to dst
	andq   %r8, %r8	        
	jle    Pos0		        # if(src[i]<=0)goTo Pos0
	iaddq  $1, %rax		    # count++, positive number otherwise

Pos0:	
	rmmovq %r9, 8(%rsi)     # Copy src[i+1] to dst[i+1]
	andq   %r9, %r9         
	jle    Pos1		        # if (src[i+1]<=0) go to Pos1
	iaddq  $1, %rax         # count++, positive number otherwise

Pos1: 
	mrmovq 16(%rdi), %r8    # Copy src[i+2] to %r8
	mrmovq 24(%rdi), %r9    # Copy src[i+3] to %r9
	rmmovq %r8, 16(%rsi)    # Copy src[i+2] to dst[i+2]
	andq   %r8, %r8         
	jle    Pos2             # if(src[i+2] <= 0), go to Pos2
	iaddq  $1, %rax         # count++, positive number otherwise

Pos2: 
	rmmovq %r9, 24(%rsi)    # Copy src[i+3] to dst[i+3]
	andq   %r9, %r9           
	jle    Pos3             # if(src[i+3] <= 0), go to Pos3
	iaddq  $1, %rax         # count++, positive number otherwise
	
Pos3: 
	mrmovq 32(%rdi), %r8    # Copy src[i+4] to %r8
	mrmovq 40(%rdi), %r9    # Copy src[i+5] to %r9
	rmmovq %r8, 32(%rsi)    # Copy src[i+4] to dst[i+4]
	andq   %r8, %r8         
	jle    Pos4             # if (src[i+4] <= 0), go to Pos4
	iaddq  $1, %rax         # count++, positive number otherwise

Pos4: 
	rmmovq %r9, 40(%rsi)    # Copy src[i+5] to dst[i+5]
	andq   %r9, %r9         
	jle    Pos5             # if(src[i+5]<=0), go to Pos5
	iaddq  $1, %rax         # count++, positive number otherwise

Pos5: 
	mrmovq 48(%rdi), %r8    # Copy src[i+6] to %r8
	mrmovq 56(%rdi), %r9    # Copy src[i+7] to %r9
	rmmovq %r8, 48(%rsi)    # Copy src[i+6] to dst[i+6]
	andq   %r8, %r8         
	jle    Pos6             # if(src[i+6] <= 0), go to Pos6
	iaddq  $1, %rax         # count++

Pos6: 
	rmmovq %r9, 56(%rsi)    # src[i+7] to dst[i+7]
	andq   %r9, %r9         
	jle    Unroller         # if(src[i+7]<=0), go to Unroller
	iaddq  $1, %rax         # count++


Unroller: 
	iaddq $64, %rdi         # Start unrolling src at [i+8]
	iaddq $64, %rsi         # Start unrolling dst at [i+8]
	iaddq $-8, %rdx         
	jge   Loop              #Back to loop 

checkNextIndexes:  
	iaddq $8, %rdx          #If there are more elements, add back 8 and start unrolled operations again  

#Loops below perform the same thing as the unrollers above, however with previous indexes+8
Next0:
	iaddq  $-1, %rdx        #Decrement 1 to len every time, so condition check can be done in next statement
	jl     Done             #Condition to end if there are no more elements
	mrmovq (%rdi), %r8   
	mrmovq 8(%rdi), %r9    
	rmmovq %r8, (%rsi)     
	andq   %r8, %r8         
	jle    Next1          
	iaddq  $1, %rax        
	
Next1: 
	iaddq  $-1, %rdx        
	jl     Done            
	rmmovq %r9, 8(%rsi)   
	andq   %r9, %r9       
	jle    Next2          
	iaddq  $1, %rax         

Next2: 
	iaddq  $-1, %rdx       
	jl     Done             
	mrmovq 16(%rdi), %r8   
	mrmovq 24(%rdi), %r9   
	rmmovq %r8, 16(%rsi)   
	andq   %r8, %r8       
	jle    Next3           
	iaddq  $1, %rax        

Next3: 
	iaddq  $-1, %rdx        
	jl     Done	        
	rmmovq %r9, 24(%rsi)  
	andq   %r9, %r9      
	jle    Next4           
	iaddq  $1, %rax 

Next4: 
	iaddq  $-1, %rdx        
	jl     Done            
	mrmovq 32(%rdi), %r8   
	mrmovq 40(%rdi), %r9   
	rmmovq %r8, 32(%rsi)   
	andq   %r8, %r8       
	jle    Next5           
	iaddq  $1, %rax         

Next5: 
	iaddq  $-1, %rdx       
	jl     Done	        
	rmmovq %r9, 40(%rsi)   
	andq   %r9, %r9      
	jle    Next6         
	iaddq  $1, %rax 

Next6: 
	iaddq  $-1, %rdx       
	jl     Done            
	mrmovq 48(%rdi), %r8  
	rmmovq %r8, 48(%rsi)   
	andq   %r8, %r8       
	jle    Done             
	iaddq  $1, %rax       


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
